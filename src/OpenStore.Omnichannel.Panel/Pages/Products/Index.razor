@page "/products"
@inject IStringLocalizer<Index> L

<OsBreadcrumb RootHref="products" RootTitle="@L["Breadcrumb.Home"]" CurrentTitle="@L["Breadcrumb.ProductList"]">
    <TitleSection>
        @L["Breadcrumb.ProductList"]
    </TitleSection>
    <ButtonsSection>
        <a href="products/add" class="btn btn-primary">
            <i class="fa fa-plus-circle fa-fw me-1"></i>@L["AddProduct"]
        </a>
    </ButtonsSection>
</OsBreadcrumb>

<div class="mb-sm-4 mb-3 d-sm-flex">
    <div class="mt-sm-0 mt-2">
        <a href="#" class="text-dark text-decoration-none"><i class="fa fa-download fa-fw me-1 text-muted"></i> Export</a>
    </div>
    <div class="ms-sm-4 mt-sm-0 mt-2">
        <a href="#" class="text-dark text-decoration-none"><i class="fa fa-upload fa-fw me-1 text-muted"></i> Import</a>
    </div>
    <div class="ms-sm-4 mt-sm-0 mt-2 dropdown-toggle">
        <a href="#" data-bs-toggle="dropdown" class="text-dark text-decoration-none">More Actions</a>
        <div class="dropdown-menu">
            <a class="dropdown-item" href="#">Action</a>
            <a class="dropdown-item" href="#">Another action</a>
            <a class="dropdown-item" href="#">Something else here</a>
            <div role="separator" class="dropdown-divider"></div>
            <a class="dropdown-item" href="#">Separated link</a>
        </div>
    </div>
</div>

<div class="card">
    <ul class="nav nav-tabs nav-tabs-v2 px-4">
        <li class="nav-item me-3">
            <a href="#allTab" class="nav-link active px-2" data-bs-toggle="tab">@L["ProductListTab.All"]</a>
        </li>
        <li class="nav-item me-3">
            <a href="#activeTab" class="nav-link px-2" data-bs-toggle="tab">@L["ProductListTab.Active"]</a>
        </li>
        <li class="nav-item me-3">
            <a href="#draftTab" class="nav-link px-2" data-bs-toggle="tab">@L["ProductListTab.Draft"]</a>
        </li>
        <li class="nav-item me-3">
            <a href="#deletedTab" class="nav-link px-2" data-bs-toggle="tab">@L["ProductListTab.Deleted"]</a>
        </li>
    </ul>
    <div class="tab-content p-4">
        <div class="tab-pane fade show active" id="allTab">


            <OsDataGrid TItem="ProductListItemReadModel" FetchData="FetchData" PageSize="PageSize">
                <OsDataGridColumn CustomTitle="@L["ColumnHeader.Title"]" TItem="ProductListItemReadModel">
                    <RowTemplate Context="item">
                        <div class="d-flex align-items-center">
                            <div class="width-60 height-60 bg-gray-100 d-flex align-items-center justify-content-center">
                                @if (!string.IsNullOrWhiteSpace(item.PhotoUrl))
                                {
                                    <img class="mw-100 mh-100" src="@item.PhotoUrl" alt=""/>
                                }
                                else
                                {
                                    <img class="mw-100 mh-100" src="assets/img/product/product-6.jpg" alt=""/>
                                }
                            </div>
                            <div class="ms-3">
                                <a href="@($"products/{item.Id}")">@item.Title</a>
                            </div>
                        </div>
                    </RowTemplate>
                </OsDataGridColumn>

                <OsDataGridColumn CustomTitle="@L["ColumnHeader.Status"]" TItem="ProductListItemReadModel">
                    <RowTemplate Context="item">
                        @(item.Status == ProductStatus.Active ? L["ProductListItem.Active"] : L["ProductListItem.Draft"])
                    </RowTemplate>
                </OsDataGridColumn>
                
                <OsDataGridColumn CustomTitle="@L["ColumnHeader.Inventory"]" TItem="ProductListItemReadModel">
                    <RowTemplate Context="item">
                        @if (item.AvailableQuantity == null)
                        {
                            @L["ProductList.InventoryNotTracking"]
                        }
                        else
                        {
                            if (item.HasMultipleVariants)
                            {
                                @L["ProductList.InventoryColumn", item.AvailableQuantity.Value, item.VariantCount]
                            }
                            else
                            {
                                @item.AvailableQuantity
                            }
                        }
                    </RowTemplate>
                </OsDataGridColumn>

                <OsDataGridColumn CustomTitle="@L["ColumnHeader.Category"]" TItem="ProductListItemReadModel">
                    <RowTemplate Context="item">
                        @*todo: category*@
                    </RowTemplate>
                </OsDataGridColumn>

                <OsDataGridColumn CustomTitle="@L["ColumnHeader.Type"]" TItem="ProductListItemReadModel">
                    <RowTemplate Context="item">
                        @(item.IsPhysicalProduct ? L["ProductList.PhysicalProduct"] : L["ProductList.NonPhysicalProduct"])
                    </RowTemplate>
                </OsDataGridColumn>
            </OsDataGrid>
        </div>
    </div>
</div>


@code {
        private const int PageSize = 50;

    private async Task<PagedListDto<ProductListItemReadModel>> FetchData(PageRequest pageRequest)
    {
        return await ApiClient.Product.GetAll(pageRequest);
    }
 

}