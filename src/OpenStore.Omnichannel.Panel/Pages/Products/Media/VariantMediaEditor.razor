@using OpenStore.Omnichannel.Shared.Dto
@using System.ComponentModel

@inherits AppBaseViewModelObservableComponent<UpdateVariantViewModel>
@inject IStringLocalizer<VariantMediaEditor> L

<Modal @ref="_modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["SelectVariantImageModal.Title"]</ModalTitle>
        </ModalHeader>
        <ModalBody Class="overflow-auto" Style="max-height: 500px">

            <div class="draggable-container">
                <div class="draggable-image-grid _16ROL">
                    @for (var i = 0; i <= ViewModel.MediaEditorItems.Count; i++)
                    {
                        <div class="draggable-image-grid-item-placeholder"></div>
                    }
                </div>
                <div class="draggable-image-grid" ondragover="event.preventDefault();">
                    <div>
                        <div class="drop-area">
                            <InputFile OnChange="OnInputFileChange"
                                       accept="image/png,image/gif,image/jpeg,image/webp"/>
                            <span>@L["DropArea.DropTitle"]</span>
                        </div>
                    </div>

                    @foreach (var item in ViewModel.MediaEditorItems)
                    {
                        <VariantMediaEditorItem Model="item" SelectedChanged="@(e => OnSelectedChanged(item, e))"/>
                    }
                </div>
            </div>

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="Close">@SharedLocalizer["Generic.Cancel"]</Button>
            <Button Color="Color.Success" Clicked="SaveVariantMedia"
                    Loading="@ViewModel.SavingVariantImage"
                    Disabled="@(ViewModel.VariantDisplayImage is null && ViewModel.SelectedMediaEditorItem is null)">
                @SharedLocalizer["Generic.Save"]
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
        const long MaxAllowed = 2048000L;

    private Modal _modalRef;

    private Task OnInputFileChange(InputFileChangeEventArgs e) => ViewModel.UploadNewMedia(e.File, MaxAllowed);

    private void OnSelectedChanged(MediaEditorItemModel item, bool selected)
    {
        if (!selected) return;

        ViewModel.SelectVariantMedia(item);
    }

    public async Task Show()
    {
        ViewModel.InitMediaEditorItems();
        await _modalRef.Show();
    }
    
    private async Task SaveVariantMedia()
    {
        await ViewModel.SaveVariantMedia();
        await Close();
    }

    private async Task Close()
    {
        ViewModel.ClearVariantMediaSelection();
        await _modalRef.Hide();
    }
    
}