@foreach (var item in Items)
{
    <div draggable="true"
         @ondragenter="@(() => HandleDragEnter(item))"
         @ondragleave="@(() => HandleDragEnter(item))"
         @ondrop="@(() => Drop(item))"
         @ondrag="@(() => StartDrag(item))">
        <MediaEditorItem Model="@item" RemoveClicked="@RemoveClicked"/>
    </div>
}

@code {

    [Parameter]
    public List<MediaEditorItemModel> Items { get; set; } = new();

    [Parameter]
    public EventCallback<List<MediaEditorItemModel>> ItemsChanged { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    private int _currentIndex;

    private void StartDrag(MediaEditorItemModel image) => _currentIndex = GetIndex(image);
    private int GetIndex(MediaEditorItemModel image) => Items.FindIndex(a => a == image);

    private async Task Drop(MediaEditorItemModel image)
    {
        var index = GetIndex(image);
        var current = Items[_currentIndex];
        Items.RemoveAt(_currentIndex);
        Items.Insert(index, current);
        _currentIndex = index;

        var reorderIndex = 0;
        foreach (var mediaEditorItemModel in Items)
        {
            mediaEditorItemModel.Dto.Position = reorderIndex++;
        }
    // StateHasChanged();

        if (IsEdit)
        {
            await ApiClient.Product.UpdateProductMedias(Id.Value, Items.Select(x => x.Dto));
            await ItemsChanged.InvokeAsync(Items);
        }
    }

    private void HandleDragEnter(MediaEditorItemModel item) => item.Dropping = true;
    private void HandleDragLeave(MediaEditorItemModel item) => item.Dropping = false;

    private async Task RemoveClicked(MediaEditorItemModel item)
    {
        if (IsEdit)
        {
            if (DeleteConfirm())
            {
                await ApiClient.Product.DeleteProductMedia(Id.Value, item.Dto.Id);
                Items.Remove(item);
                await ItemsChanged.InvokeAsync(Items);
            }
        }
    }

}