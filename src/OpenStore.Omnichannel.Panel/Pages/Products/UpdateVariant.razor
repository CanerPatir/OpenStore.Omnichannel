@page "/products/{ProductId:guid}/variants/{VariantId:guid}"
@using OpenStore.Omnichannel.Panel.Pages.Products.Media
@using Humanizer
@using System.ComponentModel

@implements IDisposable

@inject IStringLocalizer<UpdateVariant> L
@inject UpdateVariantViewModel ViewModel

<Container>
    <Row class="justify-content-center">
        <Column ColumnSize="ColumnSize.Is8.OnDesktop">

            @if (ViewModel.IsNull)
            {
                <OsSpinner/>
            }
            else
            {
                <OsPageTitle RootHref="@($"/products/{ProductId}")">
                    <TitleSection>
                        <span>@ViewModel.Model.Title</span>
                    </TitleSection>
                    <ButtonsSection>
                        <Button Loading="ViewModel.Saving" Clicked="Save" Color="Color.Success">
                            @if (!ViewModel.Saving)
                            {
                                <Icon Name="IconName.Save" Class="me-1"></Icon>
                            }
                            @SharedLocalizer["Generic.Save"]
                        </Button>
                    </ButtonsSection>
                </OsPageTitle>

                <Validations @ref="_validations" Mode="ValidationMode.Manual" Model="ViewModel.Model">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
                            <Card Margin="Margin.Is3.FromBottom">
                                <CardBody>
                                    <div class="d-flex align-items-center">
                                        <div class=" width-60 height-60 bg-gray-100 d-flex align-items-center justify-content-center">
                                            <img class="mw-100 mh-100" src="@ViewModel.DisplayImageUrl" alt=""/>
                                        </div>
                                        <div class="ms-3 d-flex flex-column">
                                            <h6 class="m-0" title="@ViewModel.Product.Title" aria-label="@ViewModel.Product.Title">
                                                @ViewModel.Product.Title.Truncate(25)
                                            </h6>
                                            <span class="text-muted mb-1">
                                                @if (ViewModel.Product.Status == ProductStatus.Draft)
                                                {
                                                    <text>@L["Label.Draft"]</text>
                                                }
                                                else if (ViewModel.Product.Status == ProductStatus.Active)
                                                {
                                                    <text>@L["Label.Active"]</text>
                                                }
                                                else if (ViewModel.Product.Status == ProductStatus.Archived)
                                                {
                                                    <text>@L["Label.Archived"]</text>
                                                }
                                            </span>
                                            <small class="mb-1">@ViewModel.Product.Variants.Count @L["Label.Variants"]</small>
                                            <a href="@($"products/{ViewModel.ProductId}")">@L["Link.BackToProduct"]</a>
                                        </div>

                                    </div>
                                </CardBody>
                            </Card>
                            <ListGroup Margin="Margin.Is3.FromBottom">
                                <ListGroupItem Class="list-group-item-gray-300" Padding="Padding.Is3">
                                    @L["CardHeader.Variants"]
                                </ListGroupItem>

                                <style>
                                    .list-group-item-action{
                                        cursor: pointer;
                                    }
                                </style>
                                @foreach (var variant in ViewModel.Product.Variants.OrderBy(x => x.Option1))
                                {
                                    var _class = variant == ViewModel.Model ? "ps-4" : "ps-4 list-group-item-action";
                                    <ListGroupItem Class="@_class">
                                        <div class="d-flex align-items-center" @onclick="@(_ => GoVariant(variant))">
                                            <div class=" width-40 height-40 bg-gray-100 d-flex align-items-center justify-content-center">
                                                <img class="mw-100 mh-100" src="@ViewModel.GetVariantDisplayImage(variant)?.Url" alt=""/>
                                            </div>
                                            <div class="ms-3">
                                                @variant.Title
                                            </div>
                                        </div>
                                    </ListGroupItem>
                                }
                            </ListGroup>

                        </Column>
                        <Column ColumnSize="ColumnSize.Is8.OnDesktop">
                            <Card Margin="Margin.Is3.FromBottom">
                                <CardBody>
                                    <h5 class="mb-3">
                                        @L["Title.Options"]
                                    </h5>

                                    <Row>
                                        <Column ColumnSize="ColumnSize.Is8">
                                            @foreach (var productOption in ViewModel.Product.Options)
                                            {
                                                var index = ViewModel.Product.Options.IndexOf(productOption);
                                                <Validation MessageLocalizer="Localize" Validator="OptionValidator">
                                                    <Field Margin="Margin.Is2.FromBottom">
                                                        <FieldLabel>@productOption.Name</FieldLabel>
                                                        <FieldBody>
                                                            @if (index == 0)
                                                            {
                                                                <TextEdit @bind-Text="@ViewModel.Model.Option1">
                                                                    <Feedback>
                                                                        <ValidationError>@SharedLocalizer["Validation.Required"]</ValidationError>
                                                                    </Feedback>
                                                                </TextEdit>
                                                            }
                                                            else if (index == 1)
                                                            {
                                                                <TextEdit @bind-Text="@ViewModel.Model.Option2">
                                                                    <Feedback>
                                                                        <ValidationError>@SharedLocalizer["Validation.Required"]</ValidationError>
                                                                    </Feedback>
                                                                </TextEdit>
                                                            }
                                                            else if (index == 2)
                                                            {
                                                                <TextEdit @bind-Text="@ViewModel.Model.Option3">
                                                                    <Feedback>
                                                                        <ValidationError>@L["Validation.Required"]</ValidationError>
                                                                    </Feedback>
                                                                </TextEdit>
                                                            }

                                                        </FieldBody>
                                                    </Field>
                                                </Validation>
                                            }
                                        </Column>
                                        <Column ColumnSize="ColumnSize.Is4">
                                            <div class="d-flex flex-column align-items-center">
                                                <div class=" width-100 height-100 bg-gray-100 d-flex align-items-center justify-content-center">
                                                    <img class="mw-100 mh-100" src="@ViewModel.VariantDisplayImage?.Url" alt=""/>
                                                </div>
                                                @if (!ViewModel.ModelDisplayImageUrlExists)
                                                {
                                                    <Button Clicked="SelectVariantImage" Margin="Margin.Is2.FromTop" Color="Color.Link">@L["Button.SelectVariantImage"]</Button>
                                                }
                                                else
                                                {
                                                    <Button Clicked="SelectVariantImage" Margin="Margin.Is2.FromTop" Color="Color.Link">@L["Button.ChangeVariantImage"]</Button>
                                                }
                                            </div>
                                        </Column>
                                    </Row>

                                </CardBody>
                            </Card>

                            <PricingEditor Model="ViewModel.Model"/>
                            <InventoryEditor Model="ViewModel.Model"/>
                        </Column>
                    </Row>
                </Validations>

                <hr class="mb-4">
                <Row>
                    <div class="d-flex align-items-center mb-4">
                        <div>
                            <Button Loading="ViewModel.Deleting" Clicked="Delete" Color="Color.Danger">
                                @if (!ViewModel.Deleting)
                                {
                                    <Icon Name="IconName.Delete" Class="me-1"></Icon>
                                }
                                @SharedLocalizer["Generic.Delete"]
                            </Button>
                        </div>
                        <div class="ms-auto">
                            <Button Loading="ViewModel.Saving" Clicked="Save" Color="Color.Success">
                                @if (!ViewModel.Saving)
                                {
                                    <Icon Name="IconName.Save" Class="me-1"></Icon>
                                }
                                @SharedLocalizer["Generic.Save"]
                            </Button>
                        </div>
                    </div>
                </Row>
            }

        </Column>
    </Row>
</Container>

<VariantMediaEditor @ref="_variantMediaEditor"/>


@code {
    private Validations _validations;
    private VariantMediaEditor _variantMediaEditor;
    
    [Parameter]
    public Guid ProductId { get; set; }

    [Parameter]
    public Guid VariantId { get; set; }

    private Task SelectVariantImage() => _variantMediaEditor.Show();

    protected override async Task OnParametersSetAsync()
    {
        await ViewModel.Retrieve(ProductId, VariantId);
    }

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnPropertyChanged;
    }

    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChanged;
    }

    private Task Save() => ViewModel.Save();

    private async Task Delete()
    {
        if (!DeleteConfirm())
        {
            return;
        }
        await ViewModel.Delete();
    }

    private void OptionValidator(ValidatorEventArgs e)
    {
        var option = Convert.ToString(e.Value);
        e.Status = string.IsNullOrEmpty(option) ? ValidationStatus.Error : ValidationStatus.Success;
    }

    private void GoVariant(VariantDto variant)
    {
        if (variant == ViewModel.Model)
        {
            return;
        }
        Navigation.NavigateTo($"products/{ViewModel.ProductId}/variants/{variant.Id.Value}");
    }
    
}