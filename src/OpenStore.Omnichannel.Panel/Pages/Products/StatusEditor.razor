@using OpenStore.Omnichannel.Shared.Dto.Product
@using System.ComponentModel
@inject IStringLocalizer<StatusEditor> L
@implements IDisposable

<ListGroupItem>
    <h5>
        @L["Title"]
    </h5>

    @if (ViewModel.Product.Status == ProductStatus.Archived)
    {
        <Card Style="background-color: #f4f6f8">
            <CardBody>
                <h5>
                    <Icon Name="IconName.Archive" IconStyle="IconStyle.Solid"/>
                    <span class="ml-1">@L["CardHeader.Archived"]</span>
                </h5>
                <Row>
                    <Column Class="text-muted">
                        <small>
                            @L["CardHeader.ArchivedDescription"]
                        </small>
                    </Column>
                </Row>
                <Row Margin="global::Blazorise.Margin.Is3.FromTop">
                    <Column Class="text-center">
                        <Button Color="Color.Secondary" Loading="ViewModel.UnArchiving" Clicked="ViewModel.UnArchive">@L["ButtonTitle.UnArchive"]</Button>
                    </Column>
                </Row>
            </CardBody>
        </Card>
    }
    else
    {
        <Field>
            <FieldBody>
                <Select TValue="ProductStatus" @bind-SelectedValue="@ViewModel.Product.Status" class="form-control">
                    <ChildContent>
                        <SelectItem Value="ProductStatus.Draft">@L["Status.Draft"]</SelectItem>
                        <SelectItem Value="ProductStatus.Active">@L["Status.Active"]</SelectItem>
                    </ChildContent>
                    <Feedback>

                        @if (ViewModel.Product.Status == ProductStatus.Draft)
                        {
                            <FieldHelp>@L["InputHelp.Draft"]</FieldHelp>
                        }
                        else if (ViewModel.Product.Status == ProductStatus.Active)
                        {
                            <FieldHelp>@L["InputHelp.Active"]</FieldHelp>
                        }
                    </Feedback>
                </Select>
            </FieldBody>
        </Field>
    }

</ListGroupItem>

@code {
     
    [CascadingParameter]
    public ProductViewModelBase ViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnPropertyChanged;
    }
    
    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChanged;
    }

    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e) => StateHasChanged();

}