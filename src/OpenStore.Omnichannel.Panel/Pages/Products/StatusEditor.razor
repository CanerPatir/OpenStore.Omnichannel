@using OpenStore.Omnichannel.Shared.Dto.Product
@inject IStringLocalizer<StatusEditor> L

<ListGroupItem>
    <h5>
        @L["Title"]
    </h5>

    @if (Model.Status == ProductStatus.Archived)
    {
        <Card Style="background-color: #f4f6f8">
            <CardBody>
                <h5>
                    <Icon Name="IconName.Archive" IconStyle="IconStyle.Solid"/>
                    <span class="ml-1">@L["CardHeader.Archived"]</span>
                </h5>
                <Row>
                    <Column Class="text-muted">
                        <small>
                            @L["CardHeader.ArchivedDescription"]
                        </small>
                    </Column>
                </Row>
                <Row Margin="global::Blazorise.Margin.Is3.FromTop">
                    <Column Class="text-center">
                        <Button Color="Color.Secondary" Loading="_unArchiving" Clicked="UnArchive">@L["ButtonTitle.UnArchive"]</Button>
                    </Column>
                </Row>
            </CardBody>
        </Card>
    }
    else
    {
        <Field>
            <FieldBody>
                <Select TValue="ProductStatus" @bind-SelectedValue="@Model.Status" class="form-control">
                    <ChildContent>
                        <SelectItem Value="ProductStatus.Draft">@L["Status.Draft"]</SelectItem>
                        <SelectItem Value="ProductStatus.Active">@L["Status.Active"]</SelectItem>
                    </ChildContent>
                    <Feedback>

                        @if (Model.Status == ProductStatus.Draft)
                        {
                            <FieldHelp>@L["InputHelp.Draft"]</FieldHelp>
                        }
                        else if (Model.Status == ProductStatus.Active)
                        {
                            <FieldHelp>@L["InputHelp.Active"]</FieldHelp>
                        }
                    </Feedback>
                </Select>
            </FieldBody>
        </Field>
    }

</ListGroupItem>

@code {
    private bool _unArchiving;
    
    [Parameter]
    public ProductDto Model { get; set; }

    [Parameter]
    public EventCallback<ProductDto> ModelChanged { get; set; }

    private async Task UnArchive()
    {
        _unArchiving = true;
        try
        {
            await ApiClient.Product.UnArchive(Model);
            await ModelChanged.InvokeAsync(Model);
        }
        finally
        {
            _unArchiving = false;
            StateHasChanged();
        }
    }

}