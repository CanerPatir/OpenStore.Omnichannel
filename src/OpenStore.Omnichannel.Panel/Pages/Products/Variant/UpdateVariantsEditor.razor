@using OpenStore.Omnichannel.Shared.Dto.Product
@inject IStringLocalizer<UpdateVariantsEditor> L

<style>
    .custom-control-label{
        display: none;
    }
</style>
<Card Margin="Margin.Is3.FromBottom">

    <ListGroup>
        <ListGroupItem>
            <div class="d-flex">
                <h5 class="mt-2 mb-2">
                    @L["Title"]
                </h5>
                <div class="ms-auto">
                    <Button Color="Color.Link" Clicked="ShowAddVariantModal">@L["Button.AddVariant"]</Button>
                </div>
            </div>

            <div class="d-flex flex-wrap align-items-center p-2">
                <div>
                    @L["Label.BulkSelect"]
                </div>
                @foreach (var option in Model.Options)
                {
                    foreach (var optionValue in option.Values)
                    {
                        <div class="ms-0">
                            <Button Color="Color.Link" Clicked="() => SelectOptionValue(optionValue)">@optionValue</Button>
                        </div>
                    }
                }
            </div>
        </ListGroupItem>

        @if (Model.Variants.Any())
        {
            <ListGroupItem Padding="Padding.Is3">
                <div class="d-flex align-items-center" style="min-height: 36px">
                    <div class="width-10 align-middle">
                        <Check TValue="bool" Class="form-check-input" CheckedChanged="SelectedAll"/>
                    </div>
                    <div class="ms-3">
                        <h6 class="m-0">
                            @L["ListGroupItem.ShowingXVariants", Model.Variants.Count]
                        </h6>
                    </div>
                    <div class="ms-auto">
                        @if (Model.Variants.Any(x => x.Selected))
                        {
                            <Dropdown>
                                <DropdownToggle Color="Color.Light">
                                    @L["Dropdown.BulkOperation"]
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem Clicked="BulkUpdatePrice">@L["DropdownItem.BulkUpdatePrice"]</DropdownItem>
                                    <DropdownItem Clicked="BulkUpdateStock">@L["DropdownItem.BulkUpdateStock"]</DropdownItem>
                                    <DropdownItem Clicked="BulkUpdateBarcodeSku">@L["DropdownItem.BulkUpdateBarcodeSku"]</DropdownItem>
                                    <DropdownItem Clicked="BulkUpdateHsCode">@L["DropdownItem.BulkUpdateHsCode"]</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        }
                    </div>
                </div>
            </ListGroupItem>
        }

        @foreach (var variant in Model.Variants)
        {
            <ListGroupItem Class="list-group-item-action" Style="cursor:pointer; color: unset" Clicked="@(_ => GoVariantDetail(variant))">
                <div class="d-flex align-items-center">
                    <div class="width-10 align-middle">
                        <Check TValue="bool" Class="form-check-input" @bind-Checked="@variant.Selected"/>
                    </div>
                    <div class="ms-3 width-60 height-60 bg-gray-100 d-flex align-items-center justify-content-center">
                        <img class="mw-100 mh-100" src="@GetVariantImage(variant)" alt=""/>
                    </div>
                    <div class="ms-3">
                        <h6 class="m-0">
                            @variant.Title
                        </h6>
                        <small>@variant.Barcode</small>
                    </div>
                    <div class="ms-auto">
                        <h6 class="m-0 d-flex justify-content-end">@variant.Price.ToCurrencyString()</h6>
                        @if (variant.TrackQuantity)
                        {
                            <small>@variant.Quantity @L["ListGroupItem.VariantQuantity"]</small>
                        }
                    </div>
                </div>
            </ListGroupItem>
        }

        @if (Model.Variants.Any())
        {
            <ListGroupItem Padding="Padding.Is4">
                <div class="d-flex align-items-center">
                    <div>
                        @L["ListGroupItem.TotalQuantity"]
                    </div>
                    <div class="ms-auto">
                        @(Model.Variants.Sum(x => x.Quantity))
                    </div>
                </div>
            </ListGroupItem>
        }
    </ListGroup>
</Card>

@if (Model.Id.HasValue)
{
    <UpdateVariantPricesModal @ref="_updateVariantPricesModal" ProductId="@Model.Id.Value" ModelChanged="@(() => StateHasChanged())"/>
    <UpdateVariantStocksModal @ref="_updateVariantStocksModal" ProductId="@Model.Id.Value" ModelChanged="@(() => StateHasChanged())"/>
    <UpdateVariantBarcodesModal @ref="_updateVariantBarcodesModal" ProductId="@Model.Id.Value" ModelChanged="@(() => StateHasChanged())"/>
    <UpdateVariantHsCodesModal @ref="_updateVariantHsCodesModal" ProductId="@Model.Id.Value"/>
}


@code {

    private UpdateVariantPricesModal _updateVariantPricesModal;
    private UpdateVariantStocksModal _updateVariantStocksModal;
    private UpdateVariantBarcodesModal _updateVariantBarcodesModal;
    private UpdateVariantHsCodesModal _updateVariantHsCodesModal;
    private IEnumerable<VariantDto> SelectedVariants => Model.Variants.Where(x => x.Selected);

    [Parameter]
    public ProductDto Model { get; set; }

    // ReSharper disable PossibleInvalidOperationException
    private string GetVariantImage(VariantDto variant) => Model.Medias.FirstOrDefault(x => x.VariantIds.Contains(variant.Id.Value))?.Url;

    // ReSharper disable PossibleInvalidOperationException
    private void GoVariantDetail(VariantDto variant) => Navigation.NavigateTo($"products/{Model.Id.Value}/variants/{variant.Id.Value}");

    private void SelectedAll(bool isChecked)
    {
        foreach (var modelVariant in Model.Variants)
        {
            modelVariant.Selected = isChecked;
        }
    }

    private void SelectOptionValue(string optionValue)
    {
        foreach (var modelVariant in Model.Variants)
        {
            modelVariant.Selected = (modelVariant.Option1 == optionValue || modelVariant.Option2 == optionValue || modelVariant.Option3 == optionValue);
        }
    }

    private void ShowAddVariantModal()
    {
        throw new NotImplementedException();
    }

    private void BulkUpdatePrice() => _updateVariantPricesModal.Show(SelectedVariants);

    private void BulkUpdateStock() => _updateVariantStocksModal.Show(SelectedVariants);

    private void BulkUpdateBarcodeSku() => _updateVariantBarcodesModal.Show(SelectedVariants);

    private void BulkUpdateHsCode() => _updateVariantHsCodesModal.Show(SelectedVariants);

}