@using OpenStore.Omnichannel.Shared.Dto.Product
@using OpenStore.Omnichannel.Shared.Request
@inject IStringLocalizer<UpdateVariantsEditor> L

<Modal @ref="_modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["UpdateVariantBarcodesModal.Title"]</ModalTitle>
        </ModalHeader>
        <ModalBody Class="overflow-auto" Style="max-height: 500px">
            <ListGroup>
                @if (_updateVariantBarcodeModelList != null)
                {
                    <ListGroupItem>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is6">
                            </Column>
                            <Column ColumnSize="ColumnSize.Is6">
                                @L["UpdateVariantStocksModal.Input.Barcode"]
                            </Column>
                        </Row>
                    </ListGroupItem>
                    foreach (var updateVariantStockModel in _updateVariantBarcodeModelList)
                    {
                        <ListGroupItem>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is6">
                                    @updateVariantStockModel.Title
                                </Column>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <TextEdit @bind-Text="@updateVariantStockModel.Barcode" Size="Size.Small" Placeholder="@L["UpdateVariantStocksModal.Input.Barcode"]"/>
                                </Column>
                            </Row>
                        </ListGroupItem>
                    }
                }
            </ListGroup>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@Cancel">@SharedLocalizer["Generic.Cancel"]</Button>
            <Button Loading="_saving" Color="Color.Success" Clicked="@Save">@SharedLocalizer["Generic.Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    class UpdateVariantBarcodeModel
    {
        public string Title { get; init; }
        public Guid VariantId { get; init; }
        public string Barcode { get; set; }

        public static implicit operator UpdateVariantBarcodeRequest(UpdateVariantBarcodeModel model)
            => new(model.VariantId, model.Barcode);
    }

    private Modal _modalRef;
    private IEnumerable<VariantDto> _variants;
    private List<UpdateVariantBarcodeModel> _updateVariantBarcodeModelList;

    private bool _saving;

    [Parameter]
    public EventCallback ModelChanged { get; set; }

    [Parameter]
    public Guid ProductId { get; set; }

    public void Show(IEnumerable<VariantDto> variants)
    {
        _variants = variants.ToList();
        _updateVariantBarcodeModelList = _variants.Select(v => new UpdateVariantBarcodeModel
        {
            VariantId = v.Id.Value,
            Barcode = v.Barcode,
            Title = v.Title
        }).ToList();
        _modalRef.Show();
    }

    private void Cancel() => _modalRef.Hide();

    private async Task Save()
    {
        _saving = true;
        try
        {
            await ApiClient.Product.UpdateVariantBarcodes(ProductId, new UpdateVariantBarcodesRequest(_updateVariantBarcodeModelList.Select(x => (UpdateVariantBarcodeRequest) x)));
            _modalRef.Hide();
            await UpdateLocalState();
            _variants = null;
            _updateVariantBarcodeModelList = null;
        }
        finally
        {
            _saving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateLocalState()
    {
        foreach (var variantDto in _variants)
        {
            var updateVariantPriceRequest = _updateVariantBarcodeModelList.Single(x => x.VariantId == variantDto.Id);
            variantDto.Barcode = updateVariantPriceRequest.Barcode;
        }
        await ModelChanged.InvokeAsync();
    }

}