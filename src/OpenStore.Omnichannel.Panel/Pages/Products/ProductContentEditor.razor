@using OpenStore.Omnichannel.Shared.Dto.Product
@inject IStringLocalizer<Create> L

<Card Margin="Margin.Is3.FromBottom">
    @if (Model != null)
    {
        <CardBody>
            @if (!string.IsNullOrWhiteSpace(HeaderTitle))
            {
                <h5>
                    @HeaderTitle
                </h5>
            }

            <Validation MessageLocalizer="Localize">
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel>@L["Form.ProductTitle"]</FieldLabel>
                    <FieldBody>
                        <TextEdit @bind-Text="@Model.Title" KeyUp="KeyUp" MaxLength="80">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Field>
                <FieldLabel>@L["Form.ProductDescription"]</FieldLabel>
                <FieldBody>
                    <RichTextEdit
                        @ref="_richTextEditRef"
                        ContentChanged="@OnContentChanged"
                        Theme="RichTextEditTheme.Snow"
                        PlaceHolder="Type your post here..."
                        SubmitOnEnter="false"
                        ToolbarPosition="Placement.Top">
                        <Toolbar >
                            <RichTextEditToolbarGroup >
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold"/>
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic"/>
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small"/>
                                    <RichTextEditToolbarSelectItem Selected="true"/>
                                    <RichTextEditToolbarSelectItem Value="large"/>
                                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                                </RichTextEditToolbarSelect>
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered"/>
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet"/>
                            </RichTextEditToolbarGroup>
                            <!-- Custom toolbar content -->
                            @* <RichTextEditToolbarGroup Float="Float.Right"> *@
                            @* *@
                            @*     <Button Clicked="@(o => { })"> *@
                            @*         <Icon Name="IconName.Save"/> *@
                            @*     </Button> *@
                            @* </RichTextEditToolbarGroup> *@
                        </Toolbar>
                        <Editor >@(Model.Description ?? " ")</Editor>
                    </RichTextEdit>
                </FieldBody>
            </Field>
        </CardBody>
    }
</Card>


@code {

    [Parameter]
    public ProductDto Model { get; set; }

    [Parameter]
    public EventCallback<ProductDto> ModelChanged { get; set; }

    [Parameter]
    public string HeaderTitle { get; set; }

    private RichTextEdit _richTextEditRef;

    private async Task OnContentChanged()
    {
        Model.Description = await _richTextEditRef.GetHtmlAsync();
        await ModelChanged.InvokeAsync();
    }

    private async Task KeyUp()
    {
        if (Model.IsCreate)
        {
            Model.Handle = new SlugHelper().GenerateSlug(Model.Title);
        }

        await ModelChanged.InvokeAsync();
    }

}