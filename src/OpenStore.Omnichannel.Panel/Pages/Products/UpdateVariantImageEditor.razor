
@using System.ComponentModel
@implements IDisposable

@inject IStringLocalizer<UpdateVariant> L
@inject UpdateVariantViewModel ViewModel

<div class="d-flex flex-column align-items-center">
    <div class=" width-100 height-100 bg-gray-100 d-flex align-items-center justify-content-center">
        <img class="mw-100 mh-100" src="@ViewModel.ModelDisplayImageUrl" alt=""/>
    </div>
    @if (!ViewModel.ModelDisplayImageUrlExists)
    {
        <Button Clicked="SelectVariantImage" Margin="Margin.Is2.FromTop" Color="Color.Link">@L["Button.SelectVariantImage"]</Button>
    }
    else
    {
        <Button Clicked="SelectVariantImage" Margin="Margin.Is2.FromTop" Color="Color.Link">@L["Button.ChangeVariantImage"]</Button>
    }
</div>

<Modal @ref="_modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["SelectVariantImageModal.Title"]</ModalTitle>
        </ModalHeader>
        <ModalBody Class="overflow-auto" Style="max-height: 500px">

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@(_ => _modalRef.Hide())">@SharedLocalizer["Generic.Cancel"]</Button>
            <Button Color="Color.Success">@SharedLocalizer["Generic.Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal _modalRef;
    
    private void SelectVariantImage() => _modalRef.Show();

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnPropertyChanged;
    }

    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChanged;
    }

}