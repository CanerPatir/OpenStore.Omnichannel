@page "/store-management/preferences"
@using OpenStore.Omnichannel.Panel.ViewModels.StoreManagement
@using System.ComponentModel

@inject IStringLocalizer<Preferences> L
@inject PreferencesViewModel ViewModel

@implements IDisposable

<Container>
    <Row class="justify-content-center">
        <Column ColumnSize="ColumnSize.Is10.OnFullHD">

            @if (ViewModel.IsLoading)
            {
                <OsSpinner/>
            }
            else
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is9.OnFullHD">
                        <div id="general" class="mb-5">
                            <h4>
                                <Icon Name="IconName.User" IconStyle="IconStyle.Regular" Class="fa-fw"></Icon>
                                @L["Label.General"]
                            </h4>
                            <p>@L["Label.General.P"]</p>
                            <Card>
                                <ListGroup Flush="true">

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.StoreName"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Name</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(GeneralModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                </ListGroup>
                            </Card>
                        </div>

                        <div id="contact" class="mb-5">
                            <h4>
                                <Icon Name="IconName.User" IconStyle="IconStyle.Regular" Class="fa-fw"></Icon>
                                @L["Label.Contact"]
                            </h4>
                            <p>@L["Label.Contact.P"]</p>
                            <Card>
                                <ListGroup Flush="true">

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.Email"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.Email</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.Phone"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.Phone</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.Address"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.Address</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.CopyrightText"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.CopyrightText</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.FacebookUrl"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.FacebookUrl</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.InstagramUrl"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.InstagramUrl</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.TwitterUrl"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.TwitterUrl</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>

                                    <ListGroupItem class="d-flex align-items-center">
                                        <div class="flex-fill">
                                            <div>@L["Label.YoutubeUrl"]</div>
                                            <div class="text-gray-700">@ViewModel.StorePreferences.Contact.YoutubeUrl</div>
                                        </div>
                                        <div class="width-100">
                                            <Button Clicked="@(() => ShowEditModal(ContactModal))" class="btn-default width-100">@L["Button.Edit"]</Button>
                                        </div>
                                    </ListGroupItem>
                                </ListGroup>

                            </Card>
                        </div>

                    </Column>

                    <Column ColumnSize="ColumnSize.Is3.OnFullHD">
                        <nav id="sidebar-bootstrap" class="navbar navbar-sticky d-none d-xl-block">
                            <nav class="nav">
                                <a class="nav-link" href="#general" data-bs-toggle="scroll-to">@L["Label.General"]</a>
                                <a class="nav-link" href="#contact" data-bs-toggle="scroll-to">@L["Label.Contact"]</a>
                            </nav>
                        </nav>
                    </Column>
                </Row>
                
                
                <PreferencesGeneralEditModal @ref="_preferencesGeneralEditModal"/>
                <PreferencesContactEditModal @ref="_preferencesContactEditModal"/>
            }
        </Column>
    </Row>
</Container>

@code {
        const string GeneralModal = nameof(GeneralModal);
        const string ContactModal = nameof(ContactModal);

    private PreferencesContactEditModal _preferencesContactEditModal;
    private PreferencesGeneralEditModal _preferencesGeneralEditModal;

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnPropertyChangedHandler;
    }

    protected override async Task OnParametersSetAsync()
    {
        await ViewModel.Retrieve();
    }

    private void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }

    private void ShowEditModal(string modalName)
    {
        switch (modalName)
        {
            case GeneralModal:
                _preferencesGeneralEditModal.Show();
                break;
            case ContactModal:
                _preferencesContactEditModal.Show();
                break;
        }
    }

}