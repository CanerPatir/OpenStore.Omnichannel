@page "/products/collections/{Id:guid}"

@inherits AppBaseViewModelObservableComponent<CollectionUpdateViewModel>
@inject IStringLocalizer<Update> L


<CascadingValue Value="ViewModel">
    <Container>
        <Row class="justify-content-center">

            <Column ColumnSize="ColumnSize.Is8.OnDesktop">

                @if (ViewModel.IsNull)
                {
                    <OsSpinner/>
                }
                else
                {
                    <OsPageTitle RootHref="products/collections">
                        <TitleSection>
                            <span>@ViewModel.Collection.Title</span>
                        </TitleSection>
                        <ButtonsSection>
                            <Button Loading="ViewModel.Saving" Clicked="Save" Color="Color.Success">
                                @if (!ViewModel.Saving)
                                {
                                    <Icon Name="IconName.Save" Class="me-1"></Icon>
                                }
                                @SharedLocalizer["Generic.Save"]
                            </Button>
                        </ButtonsSection>
                    </OsPageTitle>

                    <Validations @ref="_validations" Mode="ValidationMode.Manual" Model="ViewModel.Collection">
                        <Row>
                            <Column ColumnSize="ColumnSize.Is12">
                                <Alert Color="Color.Danger" Visible="@_formHasErrors">
                                    <Heading Size="HeadingSize.Is6" TextColor="TextColor.Danger">
                                        @L["Alert.ValidationErrors"]
                                    </Heading>
                                    <Blazorise.ValidationSummary Margin="Margin.Is0"/>
                                </Alert>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is8.OnDesktop">
                                <CollectionContentEditor/>
                                <CollectionProductListEditor/>
                                <MetaEditor/>
                            </Column>

                            <Column ColumnSize="ColumnSize.Is4.OnDesktop">
                                <CollectionImageEditor/>
                            </Column>
                        </Row>
                    </Validations>
                    <hr class="mb-4"/>
                    <Row>
                        <div class="d-flex align-items-center mb-4">
                            <div>
                                <Button Loading="ViewModel.Deleting" Clicked="ViewModel.Delete" Color="Color.Danger">
                                    @if (!ViewModel.Deleting)
                                    {
                                        <Icon Name="IconName.Delete" Class="me-1"></Icon>
                                    }
                                    @L["Button.Delete"]
                                </Button>
                            </div>
                            
                            <div class="ms-auto">
                                <Button Loading="ViewModel.Saving" Clicked="Save" Color="Color.Success">
                                    @if (!ViewModel.Saving)
                                    {
                                        <Icon Name="IconName.Save" Class="me-1"></Icon>
                                    }
                                    @SharedLocalizer["Generic.Save"]
                                </Button>
                            </div>

                        </div>
                    </Row>
                }
            </Column>
        </Row>
    </Container>
</CascadingValue>

@code {

    private bool _formHasErrors;

    private Validations _validations;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await ViewModel.Retrieve(Id);
    }

    private async Task Save()
    {
        _formHasErrors = !await _validations.ValidateAll();
        if (_formHasErrors)
        {
            return;
        }

        await ViewModel.Update();
    }

}