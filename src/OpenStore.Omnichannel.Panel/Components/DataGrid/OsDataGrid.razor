@using System.Linq;
@using OpenStore.Omnichannel.Shared.Request

@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    @if (IsSearchable)
    {
        <div class="input-group mb-4">
            <button class="btn btn-default dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Filter products &nbsp;</button>
            <div class="dropdown-menu">
                <a class="dropdown-item" href="#">Action</a>
                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
                <div role="separator" class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Separated link</a>
            </div>
            <div class="flex-fill position-relative">
                <div class="input-group">
                    <div class="input-group-text position-absolute top-0 bottom-0 bg-none border-0 pe-0" style="z-index: 1020;">
                        @if (_isReloading)
                        {
                            <div class="spinner-border" style="width: 1rem; height: 1rem;" role="status">
                                <span class="sr-only"></span>
                            </div>
                        }
                        else
                        {
                            <i class="fa fa-search opacity-5"></i>
                        }
                    </div>

                    <DebounceInput
                        class="form-control ps-35px"
                        DebounceTime="500"
                        OnValueChanged="@OnFilterChanged"
                        placeholder="Ara..."/>
                </div>
            </div>
        </div>
    }
    <div class="@ContainerCssClass">
        <table id="@Id" class="@CssClass" @attributes="TableAttributes">
            <thead>
            <tr>
                @if (IsSelectable)
                {
                    var selectColumnId = Guid.NewGuid();
                    <th class="pt-0 pb-2">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="@selectColumnId">
                            <label class="form-check-label" for="@selectColumnId"></label>
                        </div>
                    </th>
                }

                @foreach (var column in Columns)
                {
                    <th class="@column.HeaderCssClass" id="@column.Guid.ToString();">

                        @if (column.HeaderTemplate != null)
                        {
                            <span style="cursor: pointer" @onclick="(args) => OnColumnHeaderClickedEvent(args, column)">@column.HeaderTemplate(column.CustomTitle ?? column.GetColumnVisualPropertyName())</span>
                        }
                        else if (column.CustomTitle != null)
                        {
                            <span style="cursor: pointer" @onclick="(args) => OnColumnHeaderClickedEvent(args, column)">@column.CustomTitle</span>
                        }
                        else
                        {
                            <span style="cursor: pointer" @onclick="(args) => OnColumnHeaderClickedEvent(args, column)">@column.GetColumnVisualPropertyName()</span>
                        }

                        <i class="@GetColumnAscDesc(column)"></i>
                    </th>
                }
            </tr>
            </thead>
            <tbody class="list">

            @foreach (var item in PagedItems)
            {
                <tr id="@item.GetHashCode()" @onclick="(args) => OnRowClickedEvent(args, item)" @attributes="RowAttributes">
                    @if (IsSelectable)
                    {
                        var selectColumnId = Guid.NewGuid();
                        <td class="width-10 align-middle">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="@selectColumnId">
                                <label class="form-check-label" for="@selectColumnId"></label>
                            </div>
                        </td>
                    }
                    @foreach (var column in Columns)
                    {
                        if (column.RowTemplate != null)
                        {
                            <td class="@column.RowCssClass">@column.RowTemplate(item)</td>
                        }
                        else if (column.ChildContent != null)
                        {
                            <td class="@column.RowCssClass">@column.ChildContent</td>
                        }
                        else if (column.Property != null)
                        {
                            var expression = column.Property.Compile();
                            var result = expression.DynamicInvoke(item);
                            <td class="@column.RowCssClass">@result</td>
                        }
                        else
                        {
                            <td class="@column.RowCssClass"></td>
                        }
                    }
                </tr>
            }

            </tbody>
        </table>

        @if (IsLoading)
        {
            <OsSpinner/>
        }
        else if (!PagedItems.Any())
        {
            if (IfEmpty == null)
            {
                <div class="text-center text-muted p-3">@EmptyGridText</div>
            }
            else
            {
                @IfEmpty
            }
        }

    </div>

    @if (PageCount > 1)
    {
        <OsPager CurrentPage="PageNr" CurrentPageChanged="OnPageChanged" PageCount="PageCount"/>
    }

    @ChildContent

</CascadingValue>


@code{

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; } = "";

    [Parameter]
    public Dictionary<string, object> TableAttributes { get; set; }

    [Parameter]
    public Dictionary<string, object> RowAttributes { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public string ContainerCssClass { get; set; } = "table-responsive";

    [Parameter]
    public string CssClass { get; set; } = "table table-hover text-nowrap";

    [Parameter]
    public string EmptyGridText { get; set; } = "Listelenecek kayıt bulunamadı";

    [Parameter]
    public EventCallback<TItem> RowClickedEvent { get; set; }

    [Parameter]
    public RenderFragment IfEmpty { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = true;

    [Parameter]
    public bool IsSelectable { get; set; } = true;

    [Parameter]
    public TItem SelectedItem { get; set; }

    [Parameter]
    public EventCallback<TItem> SelectedItemChanged { get; set; }

    [Parameter]
    public Func<PageRequest, Task<PagedListDto<TItem>>> FetchData { get; set; }

    [Parameter]
    public int PageNr { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 20;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    private bool IsServerSide => FetchData != null;
    private bool IsClientSide => !IsServerSide;

    private string FilterTerm { get; set; }
    private OsDataGridColumn<TItem> SortColumn { get; set; }
    private OpenStore.Omnichannel.SortDirection SortDirection { get; set; } = OpenStore.Omnichannel.SortDirection.Ascending;
    private IList<OsDataGridColumn<TItem>> Columns { get; set; } = new List<OsDataGridColumn<TItem>>();
    private IEnumerable<TItem> PagedItems { get; set; } = new List<TItem>();
    private int PageCount { get; set; }
    private bool _isReloading;

    public void AddColumn(OsDataGridColumn<TItem> column)
    {
        Columns.Add(column);
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Reload();
    }

    private async Task OnRowClickedEvent(MouseEventArgs args, TItem item)
    {
        SelectedItem = item;
        await RowClickedEvent.InvokeAsync(item);
        await SelectedItemChanged.InvokeAsync(item);
    }

    private async Task OnColumnHeaderClickedEvent(MouseEventArgs clickEvent, OsDataGridColumn<TItem> column)
    {
        if (!column.IsSortable)
            return;

        if (column.Guid == SortColumn?.Guid)
        {
            SortDirection = SortDirection == OpenStore.Omnichannel.SortDirection.Ascending ? OpenStore.Omnichannel.SortDirection.Descending : OpenStore.Omnichannel.SortDirection.Ascending;
        }
        else
        {
            SortColumn = column;
        }

        await Reload();
    }

    private async Task OnFilterChanged(string term)
    {
        FilterTerm = string.IsNullOrEmpty(term) ? null : term;
        PageNr = 1;
        await Reload();
    }

    private async Task OnPageChanged(int pageNr)
    {
        PageNr = pageNr;
        await Reload();
    }

    private bool _fetchedBefore = false;

    public async Task Reload()
    {
        if (IsServerSide)
        {
            IsLoading = !_fetchedBefore;
            _isReloading = _fetchedBefore;
            try
            {
                var pageMetadata = new PageRequest(PageNr, PageSize, SortColumn?.GetColumnPropertyName(), FilterTerm, SortDirection);
                var pagedResult = await FetchData(pageMetadata);
                await Task.Delay(1000);
                PageCount = pagedResult.PageMeta.TotalPages;
                PageNr = pagedResult.PageMeta.CurrentPage;
                PagedItems = Items = pagedResult.Items;

                _fetchedBefore = true;
            }
            finally
            {
                IsLoading = _isReloading = false;
            }
        }
        else
        {
            if (Items != null)
            {
                var query = Items.AsQueryable();

                if (SortColumn != null)
                {
                    query = SortDirection == OpenStore.Omnichannel.SortDirection.Ascending ?
                        query.OrderBy(SortColumn.Property) :
                        query.OrderByDescending(SortColumn.Property);
                }

                if (!string.IsNullOrWhiteSpace(FilterTerm))
                {
                    query = query.Search(
                        Columns
                            .Where(c => c.IsFilterable)
                            .Select(x => x.Property),
                        FilterTerm);
                }

                PageCount = (int) Math.Ceiling(query.ToList().Count / (double) PageSize);

                PagedItems = query
                    .Skip((PageNr - 1) * PageSize)
                    .Take(PageSize)
                    .ToList();
            }
        }
    }

    private object GetColumnAscDesc(OsDataGridColumn<TItem> column)
    {
        if (!column.IsSortable) return "";

        if (SortColumn != null && column.Guid == SortColumn?.Guid)
        {
            return SortDirection == OpenStore.Omnichannel.SortDirection.Descending ? "fas fa-sort-down" : "fas fa-sort-up";
        }
        return "fas fa-sort";
    }

}