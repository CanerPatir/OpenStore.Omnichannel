@using System.Security.Claims

@inherits ComponentBase

@code {
        protected const string DontShowOnMobile = "d-none d-md-block";
        protected const string JustShowOnMobile = "d-block d-md-none";

    [Inject]
    protected IJSRuntime JsRuntime { get; init; }

    protected IJSInProcessRuntime JsRuntimeSync => (IJSInProcessRuntime) JsRuntime;

    [Inject]
    protected IStringLocalizer<App> SharedLocalizer { get; init; }

    [Inject]
    protected NavigationManager Navigation { get; init; }

    [Inject]
    protected AlertService AlertService { get; init; }

    public void Alert(string message) => AlertService.Alert(message);

    public bool Confirm(string message) => AlertService.Confirm(message);

    public bool ConsoleLog(string message) => AlertService.ConsoleLog(message);

    public bool ConsoleError(string message) => AlertService.ConsoleError(message);

    protected void ShowSuccess(string message, string title = null) => AlertService.ShowSuccess(message, title);

    protected void ShowError(string message, string title = null) => AlertService.ShowError(message, title);

    protected void ShowWarning(string message, string title = null) => AlertService.ShowWarning(message, title);
    
    protected string Localize(string message, IEnumerable<string> arguments) => SharedLocalizer[message, arguments];

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    protected IApiClient ApiClient { get; init; }

    [Inject]
    private SignOutSessionStateManager SignOutManager { get; init; }
    
    protected bool Loading { get; private set; }
    protected bool LoadedAny { get; private set; }

    protected async Task Run(Func<Task> operation)
    {
        try
        {
            await operation();
        }

        catch (Exception ex)
        {
            if (ex.Message.Contains("Failed to fetch"))
            {
                ShowError("Sunucu ile iletişime geçilemiyor. Lütfen internet bağlantınızı kontrol edin.", "Bağlantı Hatası");
            }
            else
            {
                ShowError(SharedLocalizer[ex.Message], "Hata");
            }
        }
    }

    protected async Task RunInLoading(Func<Task> operation)
    {
        Loading = true;
        try
        {
            await Run(operation);
        }
        finally
        {
            Loading = false;
            LoadedAny = true;
        }
    }

    protected async Task<T> GetWithLoading<T>(Func<Task<T>> operation)
    {
        T result = default;
        await RunInLoading(async () => { result = await operation(); });
        return result;
    }

    protected async Task<bool> IsInRole(string role)
    {
        var user = await GetUser();
        if (user.IsRolesEmpty())
        {
    // ReloadPage();
            throw new Exception("Roles not found " + user.Identity.IsAuthenticated);
        }

        return user.InRole(role);
    }

    protected async Task<ClaimsPrincipal> GetUser() => AuthenticationStateTask == null ? null : (await AuthenticationStateTask)?.User;

    protected async Task<Guid> GetUserId() => (await GetUser()).GetId();

    protected async Task<bool> IsAuthenticated() => (await GetUser())?.Identity?.IsAuthenticated ?? false;

    protected async void BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void ReloadPage() => Navigation.Reload();

}