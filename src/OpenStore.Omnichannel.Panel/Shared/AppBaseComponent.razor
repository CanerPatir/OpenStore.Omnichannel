@using System.Security.Claims

@inherits ComponentBase

@code {
        protected const string DontShowOnMobile = "d-none d-md-block";
        protected const string JustShowOnMobile = "d-block d-md-none";

    [Inject]
    protected IJSRuntime JsRuntime { get; init; }

    protected IJSInProcessRuntime JsRuntimeSync => (IJSInProcessRuntime) JsRuntime;

    [Inject]
    protected IStringLocalizer<App> SharedLocalizer { get; init; }

    [Inject]
    protected NavigationManager Navigation { get; init; }

    [Inject]
    protected DialogService DialogService { get; init; }

    protected void BlockUi() => DialogService.BlockUi();
    
    protected void UnblockUi() => DialogService.UnblockUi();
    
    protected void Alert(object message) => DialogService.Alert(message);

    protected bool Confirm(string message) => DialogService.Confirm(message);
    
    protected bool DeleteConfirm() => DialogService.DeleteConfirm();

    protected bool ConsoleLog(object message) => DialogService.ConsoleLog(message);

    protected bool ConsoleError(object message) => DialogService.ConsoleError(message);

    protected void ShowSuccess(string message, string title = null) => DialogService.ShowSuccess(message, title);

    protected void ShowCreatedSuccess() => DialogService.ShowCreatedSuccess();

    protected void ShowError(string message, string title = null) => DialogService.ShowError(message, title);

    protected void ShowWarning(string message, string title = null) => DialogService.ShowWarning(message, title);

    protected string Localize(string message, IEnumerable<string> arguments) => SharedLocalizer[message, arguments];

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    protected IApiClient ApiClient { get; init; } // todo: remove this and engage to mvvm

    protected async Task<bool> IsInRole(string role)
    {
        var user = await GetUser();
        if (user.IsRolesEmpty())
        {
    // ReloadPage();
            throw new Exception("Roles not found " + user.Identity.IsAuthenticated);
        }

        return user.InRole(role);
    }

    protected async Task<ClaimsPrincipal> GetUser() => AuthenticationStateTask == null ? null : (await AuthenticationStateTask)?.User;
    
}