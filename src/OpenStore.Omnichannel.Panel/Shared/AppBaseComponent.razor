@using System.Security.Claims

@inherits ComponentBase

@code {
        protected const string DontShowOnMobile = "d-none d-md-block";
        protected const string JustShowOnMobile = "d-block d-md-none";

    [Inject]
    protected IJSRuntime JsRuntime { get; init; }

    protected IJSInProcessRuntime JsRuntimeSync => (IJSInProcessRuntime) JsRuntime;

    [Inject]
    protected IStringLocalizer<App> SharedLocalizer { get; init; }

    [Inject]
    protected NavigationManager Navigation { get; init; }

    [Inject]
    protected AlertService AlertService { get; init; }

    protected void Alert(object message) => AlertService.Alert(message);

    protected bool Confirm(string message) => AlertService.Confirm(message);
    
    protected bool DeleteConfirm() => AlertService.DeleteConfirm();

    protected bool ConsoleLog(object message) => AlertService.ConsoleLog(message);

    protected bool ConsoleError(object message) => AlertService.ConsoleError(message);

    protected void ShowSuccess(string message, string title = null) => AlertService.ShowSuccess(message, title);

    protected void ShowCreatedSuccess() => AlertService.ShowCreatedSuccess();

    protected void ShowError(string message, string title = null) => AlertService.ShowError(message, title);

    protected void ShowWarning(string message, string title = null) => AlertService.ShowWarning(message, title);

    protected string Localize(string message, IEnumerable<string> arguments) => SharedLocalizer[message, arguments];

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    protected IApiClient ApiClient { get; init; }

    protected async Task<bool> IsInRole(string role)
    {
        var user = await GetUser();
        if (user.IsRolesEmpty())
        {
    // ReloadPage();
            throw new Exception("Roles not found " + user.Identity.IsAuthenticated);
        }

        return user.InRole(role);
    }

    protected async Task<ClaimsPrincipal> GetUser() => AuthenticationStateTask == null ? null : (await AuthenticationStateTask)?.User;

    protected async Task<Guid> GetUserId() => (await GetUser()).GetId();

    protected async Task<bool> IsAuthenticated() => (await GetUser())?.Identity?.IsAuthenticated ?? false;

    private void ReloadPage() => Navigation.Reload();

}